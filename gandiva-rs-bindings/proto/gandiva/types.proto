// Copyright 2024 JasonLi-cn
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package gandiva.types;

enum GandivaType {
  NONE = 0;     // arrow::Type::NA
  BOOL = 1;     // arrow::Type::BOOL
  UINT8 = 2;    // arrow::Type::UINT8
  INT8 = 3;     // arrow::Type::INT8
  UINT16 = 4;   // represents arrow::Type fields in src/arrow/type.h
  INT16 = 5;
  UINT32 = 6;
  INT32 = 7;
  UINT64 = 8;
  INT64 = 9;
  HALF_FLOAT = 10;
  FLOAT = 11;
  DOUBLE = 12;
  UTF8 = 13;
  BINARY = 14;
  FIXED_SIZE_BINARY = 15;
  DATE32 = 16;
  DATE64 = 17;
  TIMESTAMP = 18;
  TIME32 = 19;
  TIME64 = 20;
  INTERVAL = 21;
  DECIMAL = 22;
  LIST = 23;
  STRUCT = 24;
  UNION = 25;
  DICTIONARY = 26;
  MAP = 27;
}

enum DateUnit {
  DAY = 0;
  MILLI = 1;
}

enum TimeUnit {
  SEC = 0;
  MILLISEC = 1;
  MICROSEC = 2;
  NANOSEC = 3;
}

enum IntervalType {
  YEAR_MONTH = 0;
  DAY_TIME = 1;
}

enum SelectionVectorType {
  SV_NONE = 0;
  SV_INT16 = 1;
  SV_INT32 = 2;
  SV_INT64 = 3;
}

message ExtGandivaType {
  optional GandivaType type = 1;
  optional uint32 width = 2;  // used by FIXED_SIZE_BINARY
  optional int32 precision = 3; // used by DECIMAL
  optional int32 scale = 4; // used by DECIMAL
  optional DateUnit dateUnit = 5;  // used by DATE32/DATE64
  optional TimeUnit timeUnit = 6;  // used by TIME32/TIME64
  optional string timeZone = 7; // used by TIMESTAMP
  optional IntervalType intervalType = 8; // used by INTERVAL
}

message Field {
  // name of the field
  optional string name = 1;
  optional ExtGandivaType type = 2;
  optional bool nullable = 3;
  // for complex data types like structs, unions
  repeated Field children = 4;
}

message Schema {
  repeated Field columns = 1;
}

message GandivaDataTypes {
  repeated ExtGandivaType dataType = 1;
}

message GandivaFunctions {
  repeated FunctionSignature function = 1;
}

message FunctionSignature {
  optional string name = 1;
  optional ExtGandivaType returnType = 2;
  repeated ExtGandivaType paramTypes = 3;
}

// Tree Expression Builder
// code: arrow/cpp/src/gandiva/tree_expr_builder.h

message FieldNode {
  optional Field field = 1;
}

message FunctionNode {
  optional string functionName = 1;
  repeated TreeNode inArgs = 2;
  optional ExtGandivaType returnType = 3;
}

// Control Nodes

message IfNode {
  optional TreeNode cond = 1;
  optional TreeNode thenNode = 2;
  optional TreeNode elseNode = 3;
  optional ExtGandivaType returnType = 4;
}

message AndNode {
  repeated TreeNode args = 1;
}

message OrNode {
  repeated TreeNode args = 1;
}

// Literal Nodes

message NullNode {
  optional ExtGandivaType type = 1;
}

message BooleanNode {
  optional bool value = 1;
}

message UInt8Node {
  optional uint32 value = 1;
}

message UInt16Node {
  optional uint32 value = 1;
}

message UInt32Node {
  optional uint32 value = 1;
}

message UInt64Node {
  optional uint64 value = 1;
}

message Int8Node {
  optional int32 value = 1;
}

message Int16Node {
  optional int32 value = 1;
}

message Int32Node {
  optional int32 value = 1;
}

message Int64Node {
  optional int64 value = 1;
}

message Float32Node {
  optional float value = 1;
}

message Float64Node {
  optional double value = 1;
}

message StringNode {
  optional bytes value = 1;
}

message BinaryNode {
  optional bytes value = 1;
}

message DecimalNode {
  optional string value = 1;
  optional int32 precision = 2;
  optional int32 scale = 3;
}

// In Node

message InNode {
  optional TreeNode node = 1;
  optional Int32Constants int32Values = 2;
  optional Int64Constants int64Values = 3;
  optional DecimalConstants decimalValues = 4;
  optional StringConstants stringValues = 5;
  optional BinaryConstants binaryValues = 6;
  optional Float32Constants float32Values = 7;
  optional Float64Constants float64Values = 8;
}

message Int32Constants {
  repeated Int32Node int32Values = 1;
}

message Int64Constants {
  repeated Int64Node int64Values = 1;
}

message DecimalConstants {
  repeated DecimalNode decimalValues = 1;
}

message StringConstants {
  repeated StringNode stringValues = 1;
}

message BinaryConstants {
  repeated BinaryNode binaryValues = 1;
}

message Float32Constants {
  repeated Float32Node float32Values = 1;
}

message Float64Constants {
  repeated Float64Node float64Values = 1;
}

// Tree Node

message TreeNode {
  optional FieldNode fieldNode = 1;
  optional FunctionNode fnNode = 2;

  // control expressions
  optional IfNode ifNode = 6;
  optional AndNode andNode = 7;
  optional OrNode orNode = 8;

  // literals
  optional NullNode nullNode = 11;
  optional BooleanNode booleanNode = 12;
  optional UInt8Node uint8Node = 13;
  optional UInt16Node uint16Node = 14;
  optional UInt32Node uint32Node = 15;
  optional UInt64Node uint64Node = 16;
  optional Int8Node int8Node = 17;
  optional Int16Node int16Node = 18;
  optional Int32Node int32Node = 19;
  optional Int64Node int64Node = 20;
  optional Float32Node float32Node = 21;
  optional Float64Node float64Node = 22;
  optional StringNode stringNode = 23;
  optional BinaryNode binaryNode = 24;
  optional DecimalNode decimalNode = 25;

  // in expr
  optional InNode inNode = 26;
}

message ExpressionRoot {
  optional TreeNode root = 1;
  optional Field resultType = 2;
}

message ExpressionList {
  repeated ExpressionRoot exprs = 2;
}

message Condition {
  optional TreeNode root = 1;
}
